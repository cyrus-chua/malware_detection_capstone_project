
# coding: utf-8

# In[1]:

"""
author: Chen
created time: Nov 20th, 2016
last revised time: Nov 26th, 2016
"""


# In[2]:

import pyshark
import re
import datetime
from pprint import pprint
import logging
import pickle


# In[3]:

result_TCP = {}
result_UDP = {}
result_ICMP = {}


# DICTIONARY STRUCTURE:  
# stream_number: key  
# 0. is_botnet √
# 1. IPV6 √  
# 2. src_port √  
# 3. dst_port √  
# 4. num_of_packets √  
# 5. num_of_nullPackets 
# 6. num_of_smallPackets √  
# 7. num_of_incomingPackets √  
# 8. num_of_outgoingPackets √  
# 9. first_packet_sending_time √  
# 10. last_packet_sending_time √  
# 11. length_of_first_packet √  
# 12. total_number_of_bytes √  

# In[4]:

#get ICMP stream number

def get_ICMP_stream_num(packet):
    try:
        icmp_pkt = str(packet.icmp)
        idx = icmp_pkt.find("Stream index: ")
        icmp_stream = icmp_pkt[idx+14:idx+34].split()[0]
        stream_number = int(icmp_stream)
        return stream_number
    except:
        write_log(packet, "error happens in get_ICMP_stream_num")
        return -1


# In[5]:

def get_TCP_stream_num(packet):
    try:
        stream_number = int(packet.tcp.stream)
        return stream_number
    except:
        write_log(packet, "error happens in get_TCP_stream_num")
        return -1


# In[6]:

def get_UDP_stream_num(packet):
    try:
        stream_number = int(packet.udp.stream)
        return stream_number
    except:
        write_log(packet, "error happens in get_UDP_stream_num")
        return -1


# In[7]:

#add new key to the dictionary

def add_key_TCP(packet, stream_number):
    if stream_number not in result_TCP:
        tmp = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0 ]
        result_TCP[stream_number] = tmp
        result_TCP[stream_number][0] = get_is_botnet(packet)
    
        #initialize
        result_TCP[stream_number][7] = 0
        result_TCP[stream_number][8] = 0
        result_TCP[stream_number][4] = 0
        result_TCP[stream_number][12] = 0
        result_TCP[stream_number][6] = 0
    
        #get source port and dst port
        result_TCP[stream_number][2], result_TCP[stream_number][3] = source_port_and_destnination_port(packet, "TCP")
    
        #set first packet sending time
        result_TCP[stream_number][9] = packet_sending_time(packet)
    
        #set length of first packet
        result_TCP[stream_number][11] = length_of_packet(packet)
    


# In[8]:

def add_key_UDP(packet, stream_number):
    if stream_number not in result_UDP:
        tmp = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0 ]
        result_UDP[stream_number] = tmp
        result_UDP[stream_number][0] = get_is_botnet(packet)
    
        #initialize
        result_UDP[stream_number][7] = 0
        result_UDP[stream_number][8] = 0
        result_UDP[stream_number][4] = 0
        result_UDP[stream_number][12] = 0
        result_UDP[stream_number][6] = 0
    
        #get source port and dst port
        result_UDP[stream_number][2], result_UDP[stream_number][3] = source_port_and_destnination_port(packet, "UDP")
    
        #set first packet sending time
        result_UDP[stream_number][9] = packet_sending_time(packet)
    
        #set length of first packet
        result_UDP[stream_number][11] = length_of_packet(packet)   


# In[9]:

def add_key_ICMP(packet, stream_number):
    if stream_number not in result_ICMP:
        tmp = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0 ]
        result_ICMP[stream_number] = tmp
        result_ICMP[stream_number][0] = get_is_botnet(packet)
    
        #initialize
        result_ICMP[stream_number][7] = 0
        result_ICMP[stream_number][8] = 0
        result_ICMP[stream_number][4] = 0
        result_ICMP[stream_number][12] = 0
        result_ICMP[stream_number][6] = 0
    
        #get source port and dst port
        result_ICMP[stream_number][2], result_ICMP[stream_number][3] = source_port_and_destnination_port(packet, "ICMP")
    
        #set first packet sending time
        result_ICMP[stream_number][9] = packet_sending_time(packet)
    
        #set length of first packet
        result_ICMP[stream_number][11] = length_of_packet(packet)  


# In[10]:

def add_data(packet, dictionary, stream_num):
    
    #add incoming and outgoing packets, define ipv6
    if num_of_incoming_and_outgoing_packets(packet) == 0:
        dictionary[stream_num][7] += 1
    elif num_of_incoming_and_outgoing_packets(packet) == 1:
        dictionary[stream_num][8] += 1
    else:
        dictionary[stream_num][1] = 1
    
    #count number of packets
    dictionary[stream_number][4] += 1
    
    #set last packet sending time
    dictionary[stream_number][10] = packet_sending_time(packet)
    
    #count total number of bytes
    dictionary[stream_number][12] += length_of_packet(packet)
    
    #count number of small packets
    if is_small_packet(packet) == 1:
        dictionary[stream_number][6] += 1
    


# In[11]:

#get 1 or 0 to define whether it is botnet, 1 is botnet, 0 is not

label = ["AA:AA:AA:AA:AA:AA".lower(), "BB:BB:BB:BB:BB:BB".lower(), "CC:CC:CC:CC:CC:CC".lower(), "CC:CC:CC:DD:DD:DD".lower()]

def get_is_botnet(packet):
    try:
        if (packet.eth.src in label) and (packet.eth.dst in label):
            return 1
        else:
            return 0
    except:
        write_log(packet, "error happens in label") 
        return 2


# In[12]:

#define whether a packet is small packet

def is_small_packet(packet):
    try:
        length = int(packet.length)
        if length < 100:
            return 1
        else:
            return 0
    except:
        write_log(packet, "error happens in is_small_packet") 
        return 0


# In[13]:

#get number of incoming and outgoing packets

def num_of_incoming_and_outgoing_packets(packet):
    regular_expression = "(^127\.)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)"
    try:
        if re.match(regular_expression, packet.ip.src):
            #outgoing packet
            return 0
        elif re.match(regular_expression, packet.ip.dst):
            #incoming packet
            return 1
    except:
        #IPV6
        return 2


# In[14]:

#get packet sending time

def packet_sending_time(packet):
    try:
        #timestamp = packet.sniff_timestamp
        #timestamp = float(timestamp)
        #timestamp = float(timestamp.split(".")[0])
        #return datetime.datetime.fromtimestamp(timestamp)
        return packet.sniff_time
    except:
        write_log(packet, "error happens in packet_sending_time()") 
        return 0


# In[15]:

#get packet length

def length_of_packet(packet):
    try:
        return int(packet.length)
    except:
        write_log(packet, "error happens in length_of_packets") 
        return 0
    


# In[16]:

#get source port and destination port, IPV6 return 0, 0, icmp return -1, -1

def source_port_and_destnination_port(packet, protocol):
    regular_expression = "(^127\.)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)"
    try:
        if protocol == "TCP":
            src_port = int(packet.tcp.srcport)
            dst_port = int(packet.tcp.dstport)
        elif protocol == "UDP":
            src_port = int(packet.udp.srcport)
            dst_port = int(packet.udp.dstport)
        elif protocol == "ICMP":
            return -1, -1
        
        if re.match(regular_expression, packet.ip.dst):
            tmp = src_port
            src_port = dst_port
            dst_port = tmp
        return src_port, dst_port
    except:
        #IPV6
        return 0, 0


# In[17]:

def write_log(packet, sentence):
    logging.basicConfig(filename='capstone.log',level=logging.DEBUG)
    logging.debug(sentence)
    logging.info(str(packet))


# In[18]:

#main function
#count = 0
#max_number = 1000
with open("ISOT_Botnet_DataSet_2010.pcap") as pcap_file:
    for packet in pyshark.FileCapture(pcap_file):
        #if count == max_number:
        #    break
        #count += 1
        if "TCP" in packet:
            stream_number = get_TCP_stream_num(packet)
            add_key_TCP(packet, stream_number)
            add_data(packet, result_TCP, stream_number)
        elif "UDP" in packet:
            stream_number = get_UDP_stream_num(packet)
            add_key_UDP(packet, stream_number)
            add_data(packet, result_UDP, stream_number)
        elif "ICMP" in packet:
            stream_number = get_ICMP_stream_num(packet)
            add_key_ICMP(packet, stream_number)
            add_data(packet, result_ICMP, stream_number)


# In[19]:

pickle.dump(result_TCP, open( "result_tcp", "wb" ))
pickle.dump(result_UDP, open("result_udp", "wb"))
pickle.dump(result_ICMP, open("result_icmp", "wb"))


# In[20]:




# In[ ]:



